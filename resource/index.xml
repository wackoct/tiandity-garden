<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Resources on</title><link>https://wackoct.github.io/tiandity-garden/resource/</link><description>Recent content in Resources on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wackoct.github.io/tiandity-garden/resource/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://wackoct.github.io/tiandity-garden/Resource/%E4%B8%8EEffects%E5%90%8C%E6%AD%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wackoct.github.io/tiandity-garden/Resource/%E4%B8%8EEffects%E5%90%8C%E6%AD%A5/</guid><description>一些组件需要和外部系统同步
Effects 允许您在渲染后运行一些代码，以便您可以将组件与 React 外部的某个系统同步
什么是Effects，它和事件有什么不同？
渲染代码 事件处理器 Effects 允许您指定由渲染本身而不是由特定事件引起的副作用
不要急于向组件添加 Effects
Effects 通常用于“退出”您的 React 代码并与某些外部系统同步。
如何编写Effect
声明 Effect 指定 Effect 依赖 如果需要添加 cleanup 函数 useEffect 会“延迟”一段代码的运行，直到该渲染反映在屏幕上</description></item><item><title/><link>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81Effect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81Effect/</guid><description/></item><item><title/><link>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%BF%E7%94%A8Refs%E5%BC%95%E7%94%A8%E5%80%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%BF%E7%94%A8Refs%E5%BC%95%E7%94%A8%E5%80%BC/</guid><description>想要组件记住一些信息，但不想触发新的渲染，可以使用ref
在组件中添加ref 1 2 3 4 5 const ref = useRef(0) { current: 0 } 通过ref.value访问ref的当前值
可变的 黑盒——react不会追踪</description></item><item><title/><link>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%BF%E7%94%A8Refs%E6%93%8D%E4%BD%9CDOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wackoct.github.io/tiandity-garden/Resource/%E4%BD%BF%E7%94%A8Refs%E6%93%8D%E4%BD%9CDOM/</guid><description>React自动更新DOM去匹配渲染输出
在一些场景下，你需要访问由React管理的DOM元素：节点聚焦、滚动到节点或测量其大小和位置
1 2 3 4 5 6 const myRef = useRef(null); &amp;lt;div ref={myRef}&amp;gt; // 你可以使用任意的浏览器API myRef.current.scrollIntoView(); 传递函数给ref属性——ref callback</description></item><item><title/><link>https://wackoct.github.io/tiandity-garden/Resource/%E6%9C%AA%E5%91%BD%E5%90%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wackoct.github.io/tiandity-garden/Resource/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid><description>00:05
各位同学大家好，这节课呢，我们来讲一下react的国际化，那首先呢，我们先创建一个react项目，然后的话，我们可以在S2C底下呢，创建一个文件夹文件夹里面呢，还是存放我们跟语言相关的一些内容，我们比较locals，Locals里面呢，我们定义两个Json文件，一个是1n.Jason就是英文，还有一个呢，是Zh.Jason就是中文，而在这两个Json文件里面呢，我们就订一些内容，比如说我们在这儿呢，我们定一段中文，比如说我们定一个一个模块，这个模块呢，比如说是我们一个用户的模块，那用户模块里面呢，我们订一个字段，那这个字段呢，比如叫ad，那这里的话我们就对应一个新增，
01:02
然后比如在一个edit，他定的是编辑，OK，我们就定这两个字段，然后呢，我们到一点点jays里面也同样的来定一下相对应的一个内容，那如果是APP的话呢，那么我们就应该是ad，如果是APP的话呢，我们就是added，那这样一来，我们相对这个语言就已经有了，那么接下来呢，我们就可以在我们的app.gs里面进行一个改写，那么这个首先我们先安装一下我们的插件，那这个地方我们要安装的是n PM install，一个叫I18NEXT，这个就是做国际化的一个包，然后呢，还有个专门用于right，就是rightf18next，好把这两个包去安装一下，
02:00
这里有点问题，我们再试一次n PM install，这次好像，可以安装上，那我今天网络有点问题，我们一样是看吧，一样ad mi red，I18NEXT，还有呢，就是I18NEXT后面一样来安装吧，好像好像也是网络有问题，我调一下网络，然后我们再安装，OK，那这里面呢，我们已经安装好了，刚才呢，我看了一下是这个淘宝的圆的问题，我在刚才使用的是淘宝的镜像，所以说淘宝镜像呢，好像是有点问题的，如果大家，自己在做的时候也有问题的话呢，你可以把它切换到我们的NPM官方的镜像，
03:01
我们来看一下，在这儿，他说请求这个淘宝镜像呢，失败了对吧，所以说我后来呢，就换了一下我们的官方的NPM镜像，然后呢，在安装最后呢，我们就安装成功了，OK，那安装成功之后呢，我们下面来到这个app.gs里面，那么我们就可以使用这个我们安装这样两个工具了，那么首先呢，我们可以先去import一下，这里呢，我们先这样子，我们在locals里面呢，我们先创建一个index.js啊，去初始化一下我们的S8N这个东西，那么首先呢，我们可以在这个文件里面去引入我们的S8N，Ah from and I SPY next，OK，然后下面下面的话呢，我们要去把这个react f BA next也给它引入进来，</description></item></channel></rss>